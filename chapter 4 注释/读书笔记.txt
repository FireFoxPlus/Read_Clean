1.写注释是一种用代码表达意图的失败。这也是整洁代码的意图，让代码易读。
2.注释存在的时间越长，其离所描述的代码就越远，因为程序员不能坚持维护注释。
3.退而求其次，应该将注释保持在可维护、有关联、精确的高度。但是更主张的是写清楚的代码。唯有代码才能忠实的
告诉你它所做的事。
4.写注释还是将代码弄整洁？
5.好的注释：
1）法律信息。
2）提供信息的注释。
   诸如返回值，但是此类注释仍然可以由一个好的函数名来代替。
3）对意图的解释。
   比如在比较两个对象的时候，将某类放置在更高的位置。
4）阐释。
   将晦涩难明的参数或返回值翻译为某种可读形式。但是更好的方法仍然是让参数或返回值自说明。但是如果某个
参数或返回值是某标准库的一部分，阐述其意义就会有用。
5）警示。
   用于警告其他程序员会出现某种后果的注释也是有用的。
6）使用TODO注释在代码中放置要做的工作列表。
   比如为保证编码工作连续性的空方法实现。
7）放大。
   可以用来放大某种不合理操作的重要性（合理性）。比如去掉字符串的前、后空格。
6.坏注释
1）喃喃自语。
   注释写的不够好，迫使读者需要检视系统其它部分的代码或注释，来弄清注释所述的事情原委，不值所费。
2）多余的注释。
   简单的方法配上复杂的注释，读注释并不比读代码高效，也更不精确、准确。
   这就像是接受的被加工过的二手信息。其实对于复杂逻辑，要写出准确、无二意的注释本身就很难。
3）javadoc注释。
   IDE生成的，非公共代码中的javadoc注释。如果有良好的命名，是不是也能避免？
4）日志式注释。
   记录修改记录。在有版本控制之后，这也必要了。但从另一方面看，版本控制提交的注释是否应该清楚描述
提交内容？
5）废话注释
   比如：//the day of the month
         private int dayOfMonth;
6）位置标记
   比如：//Action////////////////////////////////////////////////
   尽量少用标记，只在特别有价值的时候采用。
7）括号后注释
   用以标记括号的结束，比如:
   while{
   ...
   }//while
   但是实际上应该做的是缩短函数。
   很多时候，注释是为了掩盖质量差、可读性差的代码的心理安慰剂。觉得这段代码虽然难懂，但是有注释，殊不知，
到最后，注释也看不懂。
8）归属与署名
   这应该是版本控制系统的工作。
9）注释掉的代码
   这让其他人也不敢删除该代码，久而久之，越累越多。
10）非本地信息
   比如在A函数处描述远在系统其他地方的B函数。这种注释也不利于维护。
11）信息过多
12）不明显的联系
   注释和代码之间要用明显的联系。至少要能看着注释和代码，理解注释所谈何物。

