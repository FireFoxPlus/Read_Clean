1.TDD三定律
1）在编写不能通过的单元测试前，不可编写生产代码。
2）只可编写刚好无法通过的单元测试。
3）只可编写刚好足以通过当前失败测试的生产代码。
即测试与生产代码一起编写，测试只比生产代码早些几秒钟。
这样的工作方式是否可行仍需探讨。
2.脏测试等于没测试。
测试代码的维护应该遵循生产代码的质量。否则，维护旧的测试代码，会使工作量翻番。
测试代码应该和生产代码一样重要。需要思考、设计，应该像生产代码一样整洁。
单元测试是保证修改历史代码正确性的有力保障。
正是单元测试保证了代码的扩展、维护质量。因为有了单元测试，就不用担心对代码的修改。没有测试，每次修改都可能引入缺陷。
3.整洁的测试
在单元测试中，可读性甚至比生产代码还重要。
测试应该简明的分为 构造-操作-检验三个环节。可以使用以give when then打头的三个函数编写测试用例。
4.面向特定领域的测试语言
即根据测试需求，封装API，简化操作。
使用反射注值，免除手动赋值。
5.每个测试一个断言