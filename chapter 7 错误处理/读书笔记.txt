1.错误处理很重要，但是如果因为到处都是凌乱的错误处理，而不能看懂代码，就是错误的。
2.使用异常而非返回码
  使用错误代码的方法要求调用者在调用之后立即检查错误码，这个步骤很容易遗忘。
3.先写try-catch-finally
4.可控异常
  即声明方法可能抛出的异常类型，需要指出，这些抛出异常类型是方法签名的一部分。
  可控异常的代价是违反开放/封闭原则（扩展开放，修改封闭）。
  比如在方法中抛出可控异常，而catch语句在三个层级之上，就得在catch语句和抛出异常处之间的每个方法签名中声明该异常。
5.给出异常发生的环境说明。要创建充分的错误消息。
6.依调用者需要定义异常类
  错误分类有很多方式。在应用程序中定义异常类的时候，最重要的考虑应该是他们如何被捕获。
  可以将第三方调用抛出的异常打包，定义新的异常类，降低对第三方的依赖，也简化对异常的捕获和处理。（原有多个异常处理，现在统一定义为一种新的异常）
7.定义常规流程。
  将异常行为封装到特例对象中，而不是应付异常行为。
8.不要返回null
   返回null值，是在增加工作量（需要判空），也是增加了调用者犯错的可能，因为到处都要做null判断。
   与其返回null，不如抛出异常或是特列对象比如空的list（Collection.emptyList()）。
   如果第三方API可能返回null，可以考虑重新打包这个方法，在新的方法中抛出异常或是返回特例对象。
9.不要传递null
   