原始代码在修改之后很久，其代码风格和可读性仍会影响到可维护性和可扩展性。
1.垂直格式
短文件比长文件易于理解，长度在200-500行是比较合适的。
1）向报纸学习
   源文件应该像报纸一样。名称应当简单且一目了然。名称本身应该足够告诉我们是否在正确的模块中。源文件的最顶部应该给出高层次概念和算法。细节应该往下渐次展开，直到
   找到源文件中最底层的细节。
   报纸也没有只刊登一篇故事的。
2）概念间垂直方向上的间隔
   每行展现一个表达式或一个子句。每组代码行展示一条完整的思路。这些思路用空白行间隔开来。
   比如封包声明、导入声明和每个函数之间，都有空白行隔开。每个空白行都是一个线索，往下读代码的时候，目光总是停留在空白行之后的那一行。所以用好空白行，不要滥用空白行。
3）垂直方向上的靠近
  空白行隔开了概念，靠近的代码行则暗示了他们之间的紧密关系。
4）垂直距离
   在某个类中摸索，从一个函数调到另一个函数，上下求索，苦苦追索某个变量或函数的调用链或者是集成链。应该花在理解业务逻辑的时间，却花在找寻代码碎片在哪里。
   关系密切的概念应该避免放在不同的源文件中。
   变量声明：
   变量声明应该尽可能靠近其使用位置。因为函数很短，本地变量应该在函数的顶部出现。
   实体变量应该在类的顶部出现。
   相关函数：
   如果某个函数调用了另一个，就应该把他们放到一起。而且调用者尽可能放到被调用者上方。这样读者总是很确信函数声明总会在其调用后很快出现。
   概念相关：
   比如操作相似的一组函数。junit框架中的assertFalse函数（重载）。
5）垂直顺序
   自上而下的展示函数调用依赖顺序。可以使用总--分的顺序，先用最少的细节进行描述，然后底层细节最后出来。
2.横向格式
   应该保持代码行短小。建议上线是120个字符。
1）水平方向上的区隔与靠近
   一般来说，运算符之间空格隔开。函数参数之间空格隔开。函数名与括号之间不用隔开。
2）水平对齐
   如果有较长的列表需要做对齐处理，那么问题其实是出在列表的长度上，而不是对齐。比如说，
   类中很长的成员变量列表，可以认为类应该被拆分了。
3）缩进
   良好的缩进有助于提高可读性。
4）团队规则
   团队可以共同制定格式风格，并写入IDE，一直沿用。