1.实际上，即使变量是私有的，而且我们通过get、set方法使用变量，其实现方法仍然暴露了。
隐藏实现并非只是在变量之间放上一个函数而已，隐藏实现关乎的是抽象！
类并不简单的也get、set方法将变量推向外间，而是暴露抽象接口，以便用户无需了解数据的实现就能操作数据本体。（笛卡尔坐标，极坐标）
以抽象的方式表述数据，在并不是用接口就万事大吉，要以最好的方式呈现某个对象包含的数据。
2.数据、对象的反对称性
对象把数据隐藏于抽象之后，暴露操作数据的函数。数据结构暴露数据，没有提供有意义的函数。
3.过程式代码便于在不改动既有数据结构的情况下，添加新的函数。
  面向对象的代码便于在不改动既有函数的前提下添加新类。（多态）
  反过来：
  过程式代码难以添加新数据结构，因为必须修改所有函数。
  面向对象的代码难以添加新函数，因为必须修改所有的类。
  总结一下：当需要添加新数据类型而不是新函数的时候，面向对象很合适。
            当需要添加新函数而不是数据类型的时候，过程式代码较合适。
4.德墨忒尔律（只与直接朋友谈话）
  模块不应了解他所操作对象的内部情况。
  方法不应调用由任何函数返回的对象的方法。
  类C的方法f只应调用以下对象的方法：
  C、由f创建的对象、作为参数传递给f的对象、由c的实体变量持有的对象。
5.应该避免一连串的连续调用（链式），应该在恰当的地方做切分。
6.数据传送对象DTO
  应该纯粹，只包含变量和其get、set方法，而没有其他的方法。
  
