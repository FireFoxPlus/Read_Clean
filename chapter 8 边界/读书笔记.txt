1.在很多情况下，我们需要将外来代码干净利落的整合进自己的代码中。不管是第三方的类库或是其他团队的组件。
2.接口的提供者想要提供普适性，而接口的使用者希望集中满足特定需求，这样的矛盾就会导致系统在边界上出现问题。
3.举例来说：
Map<Sensor> sensors = new HashMap<Sensor>();
Sensor s  = sensors.get(sensorId);
如上的使用，意味着Map接口被修改时，许多地方都要跟着修改。更好的方式是：
public class Sensors{
  private Map sensors = new HashMap<Sensor>();
  public Sensor getById(String id){
    return (Sensor) sensors.get(id);
  }
}
这样一来，类型的转换和管理都是在sensors内部进行的。Map就被隐藏了。
建议是：不要讲Map（或在边界上的其他接口）在系统中传递。如果使用类似Map这样的边界接口，就把它保留在类或近亲类中。
避免从公共API中返回边界接口。或将边界接口作为参数传递给公共API。（减少变化带来的影响）
4.学习第三方代码很难，整合第三方代码也很难。不要在新代码中试验新的东西，而是编写单元测试来遍览和理解第三方代码。
而且在第三方包更新的时候，通过运行单元测试，就知道第三方代码的功能是否发生了变化。
5.还有一种边界，就是已知和未知的边界。
可以先编写与之交互的接口（adapter模式），使得整个编码过程清晰明了，也控制了外部交互所带来的改变的变更范围就是定义的接口。
6.整洁的边界
应该说，边界上的改动是无法避免的。所以应该避免我们的代码过多的了解第三方代码中的特定信息。依靠能控制的东西，好过依靠控制不了的东西，免得日后受它控制。

