1.类的组织
类应该从一系列的变量开始。如果有公共静态常量，应该先出现，然后是私有静态变量，以及私有实体变量。
2.类应该短小
与函数用行衡量大小不同。类用权责的概念进行衡量。
类的名称应该描述其权责。实际上，命名正是帮助判断类的长度的第一个手段，如果无法为某个类命以精确的名称，这个类大概就太长了。类名越含混，该类越有可能拥有过多的权责，
比如：Processor、Manager、Super等。
3.单一权责原则
类或模块应有且只有一条加以修改的理由。该原则既给出了权责定义，又是关于类的长度的指导方针。
鉴别权责常常帮助我们在代码中认识到并创建出更好的抽象。
许多短小的类并不会使我们在了解一件较大的工作是如何完成的时候，在类与类之间找来找去，这不是缺点。反之，拥有巨大、复杂的类的系统，总是让我们在目前并不需要了解的
一大堆东西中跋涉。
4.内聚
类应该只有少量的实体变量。类中的每个方法都应该操作一个或多个这种变量。通常来说，方法操作的变量越多，就越容易黏聚到类上。
一般来说，应该保持较高的类的内聚性。（结合为一个逻辑整体）
5.保持内聚性就会得到许多短小的类
在分解函数的过程中，调用新得到的函数可能需要传递多个参数，为了避免传递多个参数，可以将这些需要传递的参数提升为实体变量。但是这些新的实体变量就只有某些方法需要
使用了，那么如果有只有某些函数需要共享的变量，就有将之独立为类的机会了。
6.为了修改而组织
对于多数系统，修改将一直持续。没出修改都让我们冒着系统其它部分不能如期望般工作的风险。在整洁的系统中，我们队类加以组织，以降低修改的风险。
出现了只与类的一小部分有关的私有方法，意味着存在改进空间。
公共的私有行为可以划到单独的类中。
通过接口、抽象类等手段，可以实现开放-封闭原则。
通过降低连接度，我们的类就遵循了另一条设计原则，即依赖倒置原则。即类应该依赖于抽象而不是实现细节。